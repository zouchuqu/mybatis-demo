<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.demo.model">

    <!-- 根据 id 查询 user_info 表中的数据
      id:唯一标识符，此文件中的id值不能重复
      resultType:返回值类型，一条数据库记录也就对应实体类的一个对象
      parameterType:参数类型，也就是查询条件的类型
   -->
    <!--在配置文件 mybatis-config.xml 中如果没有配置别名，则需要写全类名-->
    <!--<select id="selectUserInfoById" resultType="com.mybatis.demo.model.UserInfo" parameterType="Long">-->
    <select id="selectUserInfoById" resultType="UserInfo" parameterType="int">
        <!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #{id}表示占位符，里面不一定要写id,写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 -->
        select * from user_info where id = #{id}
    </select>


    <!-- 查询 user_info 表的所有数据
        注意：因为是查询所有数据，所以返回的应该是一个集合,这个集合里面每个元素都是User类型
     -->
    <select id="selectUserInfoAll" resultType="UserInfo">
        select * from user_info
    </select>

    <!-- 模糊查询：根据 user_info 表的username字段
            下面两种写法都可以，但是要注意
            1、${value}里面必须要写value，不然会报错
            2、${}表示拼接 sql 字符串，将接收到的参数不加任何修饰拼接在sql语句中
            3、使用${}会造成 sql 注入
     -->
    <select id="selectLikeUserName" resultType="UserInfo" parameterType="String">
        select * from user_info where username like '%${value}%'
        <!-- select * from user where username like #{username} -->
    </select>

    <!-- 向 user_info 表插入一条数据 -->
    <insert id="insertUserInfo" parameterType="UserInfo">
        insert into user_info(id,username,password)
            value(#{id},#{username},#{password})
    </insert>

    <!-- 根据 id 更新 user_info 表的数据 -->
    <update id="updateUserInfoById" parameterType="UserInfo">
        update user_info set username=#{username} where id=#{id}
    </update>

    <!-- 根据 id 删除 user_info 表的数据 -->
    <delete id="deleteUserInfoById" parameterType="int">
        delete from user_info where id=#{id}
    </delete>
</mapper>