<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--命名空间是接口的全类名-->
<mapper namespace="com.mybatis.demo.mapper.UserInfoMapper">

    <!-- 定义 sql 片段 -->
    <sql id="selectUserByUserNameAndSexSQL">
        <if test="username != null and username != ''">
            AND username = #{username}
        </if>
        <if test="sex != null and sex != ''">
            AND sex = #{sex}
        </if>
    </sql>
    <!-- 根据 id 查询 user_info 表中的数据
      id:唯一标识符，此文件中的id值不能重复
      resultType:返回值类型，一条数据库记录也就对应实体类的一个对象
      parameterType:参数类型，也就是查询条件的类型
   -->
    <!--在配置文件 mybatis-config.xml 中如果没有配置别名，则需要写全类名-->

    <select id="selectUserInfoByUsernameAndSex" resultType="UserInfo" parameterType="UserInfo">
        select * from user_info
        <trim prefix="where" prefixOverrides="and | or">

            <!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace -->
            <include refid="selectUserByUserNameAndSexSQL"></include>
            <!-- 在这里还可以引用其他的 sql 片段 -->
        </trim>
    </select>


    <!-- 根据 id 更新 user_info 表的数据 -->
    <update id="updateUserInfoById" parameterType="UserInfo">
        update user_info u
        <!--prefix：标签； suffixOverrides：去掉最后一个逗号（也可以是其他的标记）-->
        <trim prefix="set" suffixOverrides=",">
            <if test="username != null and username != ''">
                u.username = #{username},
            </if>
            <if test="sex != null and sex != ''">
                u.sex = #{sex},
            </if>
        </trim>
        where id=#{id}
    </update>


    <select id="selectUserInfoByChoose" resultType="UserInfo" parameterType="UserInfo">
        select * from user_info
        <where>
            <choose>
                <when test="id !='' and id != null">
                    id=#{id}
                </when>
                <when test="username !='' and username != null">
                    and username=#{username}
                </when>
                <otherwise>
                    and sex=#{sex}
                </otherwise>
            </choose>
        </where>
    </select>


    <select id="selectUserByListId" parameterType="com.mybatis.demo.model.UserInfoForm" resultType="UserInfo">
        select * from user_info
        <where>
            <!--
                collection:指定输入对象中的集合属性
                item:每次遍历生成的对象
                open:开始遍历时的拼接字符串
                close:结束时拼接的字符串
                separator:遍历对象之间需要拼接的字符串
                select * from user where 1=1 and id in (1,2,3)
              -->
            <foreach collection="ids" item="id" open="and id in (" close=") " separator=",">
                #{id}
            </foreach>
        </where>
    </select>


    <select id="selectUserInfoById" resultType="UserInfo" parameterType="int">
        <!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #{id}表示占位符，里面不一定要写id,写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 -->
        select * from user_info where id = #{id}
    </select>

    <select id="selectUserInfoAll" resultType="UserInfo">
        select * from user_info
    </select>

    <select id="selectLikeUserName" resultType="UserInfo" parameterType="String">
        select * from user_info where username like '%${value}%'
        <!-- select * from user where username like #{username} -->
    </select>

    <!-- 向 user_info 表插入一条数据 -->
    <insert id="insertUserInfo" parameterType="UserInfo">
        insert into user_info(id,username,password,high,age,sex)
            value(#{id},#{username},#{password},#{high},#{age},#{sex})
    </insert>

    <!-- 根据 id 删除 user_info 表的数据 -->
    <delete id="deleteUserInfoById" parameterType="int">
        delete from user_info where id=#{id}
    </delete>
</mapper>